# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "CI"
on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ main ]
jobs:

  rspec:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            public/assets/
            public/packs-test/
            tmp/shakapacker
          key: ${{ runner.os }}-assets-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version-file: .tool-versions

      - name: 'Yarn Install'
        run: yarn install

      - name: Setup test database
        run: bin/rails db:prepare

      - name: Run tests
        run: bin/rspec

  lint-ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      # Add or replace any other lints here
      - name: Security audit dependencies
        run: bin/bundler-audit --update
      - name: Security audit application code
        run: bin/brakeman -q -w2
      - name: Lint Ruby files
        run: bin/rubocop --parallel

  lint-javascript:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            public/assets/
            public/packs-test/
            tmp/shakapacker
          key: ${{ runner.os }}-assets-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version-file: .tool-versions

      - name: 'Yarn Install'
        run: yarn install

      - name: Lint Javascript files
        run: bin/yarn run eslint app/javascript/**/*.jsx

  assets-compile:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: production
      SECRET_KEY_BASE: precompile_placeholder
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            public/assets/
            public/packs-test/
            tmp/shakapacker
          key: ${{ runner.os }}-assets-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version-file: .tool-versions

      - name: 'Yarn Install'
        run: yarn install

      - name: Compile assets (js and css)
        run: bin/rails shakapacker:compile

  cucumber:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2]
    env:
      RAILS_ENV: test
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Enhanced asset cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            public/assets/
            public/packs-test/
            tmp/shakapacker
            tmp/cache/assets
          key: ${{ runner.os }}-assets-v2-${{ hashFiles('**/yarn.lock', 'Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-assets-v2-
            ${{ runner.os }}-assets-

      - name: Cache test database schema
        uses: actions/cache@v4
        with:
          path: |
            db/schema.rb
            db/structure.sql
          key: ${{ runner.os }}-schema-${{ hashFiles('db/migrate/*') }}

      - uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version-file: .tool-versions

      - name: 'Yarn Install'
        run: yarn install --frozen-lockfile

      - name: Setup test database
        run: |
          bin/rails db:prepare
          bin/rails parallel:setup

      - name: Precompile assets for testing
        env:
          RAILS_ENV: test
          SECRET_KEY_BASE: test_secret_key_base
        run: bin/rails assets:precompile

      - name: Run Cucumber tests with parallelization
        env:
          CUCUMBER_GROUP: ${{ matrix.group }}
        run: |
          # For now, run all features in parallel since we only have one feature file
          # When more features are added, this can be split by feature directories
          if [ "${{ matrix.group }}" = "1" ]; then
            bundle exec parallel_cucumber features/ -n 2
          else
            echo "Group ${{ matrix.group }} - no additional features to run yet"
            # Future: run specific feature directories for this group
          fi
